<script type="text/javascript">
  $(function(){
  
  // Tabs
  $('#tabs').tabs();
 // alert('arrow next');
  $('#c-arrow').rotateRight(0);
  $('a[rel*=facebox]').facebox(); 
  $('input[rel*=facebox]').facebox(); 
  $("#isPrivate").hide();
  });
</script>

<!--body part start -->
<div id="mainBody">
<!--left side start -->
<div id="leftPan">
<h2><%=t :navigation_public_title %></h2>
<ul>
<li class="fill-up"></li>
<% Device.public.each do |dev| %>
  <% if dev.imei == @device.imei %>
   <li><%= link_to dev.name, { :action => 'show', :id => dev.id}, :class => 'selected' %></li>
  <% else %>
   <li><%= link_to dev.name, { :action => 'show', :id => dev.id}, :class => 'middle' %></li>
  <% end %>
<% end %>
<li class="fill-down"></li>
</ul>
<h2><%=t :navigation_private_title %> <img class="navi-private-icon" src="/images/private.png" border="0"/></h2>
<ul>
<li class="fill-up">
</li>
<% Device.private.each do |dev| %>
  <% if dev.imei == @device.imei %>
   <li><%= link_to dev.name, { :action => 'show', :id => dev.id}, :class => 'selected' %></li>
  <% else %>
   <li><%= link_to dev.name, { :action => 'show', :id => dev.id}, :class => 'middle' %></li>
  <% end %>
<% end %>
<li class="fill-down"></li>
<!-- 
<li><a class="first" href="#">Jaana-vaimo<div class="off-line-div"></div></a></li>
-->
</ul>

<h2><%=t :navigation_new_title %></h2>
<ul>
<!-- <li><a href="/uusi-laite.htm" rel="facebox" class="first last">Lis채채 uusi laite...</a></li> -->
<li><%= link_to "Add new device", { :action => 'new'}, :class => 'first last' %></li> 
</ul>

<h3><%=t :navigation_icons_title %></h3>
<ul>
<li class="first"><%=t :navigation_icons_observer %><div class="icon-observer"></div></li>
<li class="middle"><%=t :navigation_icons_last_location %><div class="icon-object-last"></div></li>
<li class="last"><%=t :navigation_icons_other_location %><div class="icon-object-old"></div></li>
</ul>

<h3><%=t :navigation_about_title %></h3>
<ul>
<li class="first"><%=t :navigation_developers %>: kyb3R, sergimon. <a href="http://5w.fi/con/index.php/projektit/catss"><%=t :navigation_read_more %></a></li>
<li class="last">Hackerspace Tampere<a href="http://5w.fi"><img border="0" src="http://5w.fi/data/logo/logo-120x50.png"/></a></li>
</ul>
</div>



<!--left side end -->
<!--right side start -->
<div id="rightPan">

  <h2></h2>
  <div id="tabs" style="border:none;background:none;height:500px;width:850px;"> <!-- 850px -->
    <ul style="height:25px;border:none;background:none;min-height:25px;padding:0;">
      <li style="width:250px;margin-left:-200px;"><a href="#tabs-1"><%=t :object_locations_title %></a></li>
      <li style="width:300px;"><a href="#tabs-2"><%=t :object_configuration_title %></a></li>
      <li style="width:213px;"><a href="#tabs-3"><%=t :object_history_title %></a></li>
    </ul>
    <div id="tabs-1" style="background:none;width:100%;">
      <div id="detailsMap" style="float:left;margin-left:-200px;padding-left:0px;height:400px;padding-bottom:10px;background:none;"><br/>
	<span id="sijainti-kohde">
         <% if @device.name.length >= 10 %> 
          <%= @device.name[0..10] %>
         <% else %>
          <%= @device.name %>
         <% end %>

	</span><span><img id="isPrivate" class="private-icon" src="/images/private.png" border="0"/></span><br/>
        <!-- ### POWER INDICATOR ### -->
        <div id="powerindicator"> 
	  <div id="power-level">?? %</div>
          <div id="power-left">&nbsp;</div>
	  <div id="power-middle" class="high" style="width:0px;">&nbsp;</div>
          <div id="power-right"></div>
        </div>
        <div id="is-offline"></div>
	<span id="timeNow" style="font-size:0.7em;padding-top:10px;padding-left:5px;">yyyy-mm-dd, hh:mm:ss</span>
      </br><br/>
      <div class="item-basic">
	<span class="item-title"><%=t :object_locations_coordinates %></span> 
	<div style="margin-top:5px;padding-left:15px;font-weight:bold;"><%=t :object_locations_latitude %>
	  <span style="float:right;padding-right:10px;">
	    <input type="text" class="coord" id="cur-lat" size="7" style="font-size:0.8em;" value="47.643186"/>째</span>
	</div><br/>
	<div style="margin-top:-10px;padding-left:15px;font-weight:bold;"><%=t :object_locations_longitude %>
	  <span style="float:right;padding-right:10px;">
	    <input class="coord" id="cur-lng" size="7" type="text" style="font-size:0.8em;" value="11.228027"/>째</span>
	</div><br/>
            <input type="text" style="width:40px;display:none;"  id="aste" value="0"/>
	    <input type="text" style="width:40px;display:none;"  id="v-aste" value="0"/>
	<div class="wraptocenter">
          
	  <img id="c-arrow" src="/images/compas-arrow.png"/>
	</div>

	<span class="item-title"><%=t :object_locations_distance %>
	  <span style="float:right;padding-right:10px;margin-top:3px;">
	    <input class="coord" size="10" type="text" id="item-distance" style="font-size:0.7em;" value=""/>
	  </span>
	</span>
 
      </div>

 </div> 


<!-- ######### KARTTA ############# -->
<div id="kartta" class="item-map">
  <div class="map_wrap" style="border:solid 0px #fff;">

    <div class="side_wrap" style="border:solid 0px #fff;">
      <div id="side_bar"><div><%=t :object_locations_noticed %><div id="side_bar_items"></div></div></div>
      <div id="obs_pos"><div></div></div>
    </div>

    <div id="control_and_map" class="control_and_map">
      <div id="control"><input type="text" id="item-address" style="width:280px;" value="<%=t :object_locations_address %>"/>
	<a href="#map_options" rel="facebox" class="first last"><%=t :object_locations_map_config %></a>
        <!-- <span id="tallenna"><input href="#map_options" rel="facebox" value="Kartan asetukset..."></input></span> -->
	<div id="map_options" style="display:none;">
	  <h3>Map View Config</h3>
          <div class="row">
	  <input type="checkbox" selected="false" id="cbShowRadius" onChange="javascript:toggleAlertCircle();" value="1">Show Alert-circle</input>
          </div>
          <div class="row">
	  <input type="checkbox" selected="false" id="cbShowNavi" onChange="javascript:toggleNavi();" value="1">Show Navigation</input> 
          </div>
          <div class="row">
	  <input type="checkbox" selected="false" id="cbShowRoute" onChange="javascript:toggleRoute();" value="1">Draw connections between mobile locations</input>
          </div>
          <div class="row">
	    <input type="checkbox" selected="false" id="cbDrawConnection" onChange="javascript:toggleDrawConnection();" value="1">Draw connection line between observer and selected mobile unit.</input>
          </div>
          <div class="row">
	  Select Maptype:<select name="mymaptype" onChange="setCurMapType(this.value);" id="sMapType"></select>
	  </div>
	</div>
      </div>
      <div id="map"></div>
    </div> 
   </div>
</div>
   <!-- ####### map event table ######### -->
   <div id="eventTable">
  <h3>Muut tapahtumat/objektit<span id="otherEventsTime"></span><span id="event-log"></span></h3>
     <table id="sortable" cellspacing="1" class="tablesorter">             
       <thead>
         <tr> 
           <th></th> 
           <th>When</th> 
           <th>Who</th> 
           <th>What</th> 
         </tr> 
       </thead> 
       <tbody> 
        <tr> 
          <td><img src="images/private.png" border="0"/></td>
	  <td>2004-04-10 17:45</td>
          <td>Toiwo</td> 
	  <td>New location received.</td> 
        </tr> 
       </tbody> 
     </table>
   </div>
</div>



<!-- <div id="mapMaxHorizControl"></div>
<input type="button" id="toggleMapMax" value="MaxHoriz"/>
</div> -->  

<div id="tabs-2" style="text-indent:none;border:none;">
  <div style="text-indent:0px; margin-top:22px;left-indent:0px;margin-left:-200px;width:800px;border:dotted 0px #ddd;float:left;">
    
  <div id="sijainti-kohde"><%= @device.name %></span><span style="font-size:0.5em;padding-top:10px;"> 
  (<%= @device.created_at.to_s(:datetime) %>)
   <% form_for @device, :html => { :method =>  'delete' } do |f | %>       
   <%= hidden_field_tag(:id, @device.id) %>
   <span id="tallenna" style="font-size:1.5em;">
     <%= submit_tag "remove mobile unit" %>
   </span>
   <% end -%>


     </div></br><br/>
<span id="tallenna"><input type="button" value="save settings"/></span>
<h3>Mobile unit server configuration</h3>
<ol id="asetus">
<li class='fancy-li'>
Nimi<span class="asetukset-desc">
<!-- <span class="asetukset-desc"><input type="text" id="user-settings-name" class="asetukset-input-text" value="100"/></span>
-->
<% select("device", "id", Device.find(:all).collect {|p| [ p.name, p.id ] }) %>
</span>
</li>

<li class='fancy-li'>
Visibility:<span class="asetukset-desc" style="width:250px;">
<select name="public" class="asetukset-input-select" style="border:solid 1px #fff;">
<option value="private">Visible only to me (Private)</option>
<option value="public">Visible to everyone (Public)</option>
</select>

</span>
</li>




<li class='fancy-li'>
Observer location(lat/long):
<span class="asetukset-desc" style="width:250px;"><input type="text" id="user-settings-pos-lat" class="asetukset-input-text" style="width:95px;" value="47.643186"/><input type="text" id="user-settings-pos-lng" class="asetukset-input-text" style="width:95px;margin-left:10px;" value="07.643186"/></span>
</li>

<li class='fancy-li'>
Alert-circle (in meters):
<span class="asetukset-desc"><input type="text" id="user-settings-alarm-meters" class="asetukset-input-text" value="100"/></span>
</li>

</ol>
<span id="tallenna"><input type="button" value="tallenna"/></span>
<h3>Mobile unit internal configuration</h3>
<ol id="asetus">
<li class='fancy-li'>
IMEI-code:<span class="asetukset-desc"><input type="text" class="asetukset-input-text" value="as324543254dfdfg345"/></span>
</li>

<li class='fancy-li'>
Coordinate transmit frequency (in minutes):<span class="asetukset-desc" style="width:250px;">
<select name="update-freq" class="asetukset-input-select" style="border:solid 1px #fff;">
<option value="1">1</option>
<option value="2">2</option>
<option value="3">3</option>
<option value="4">4</option>
<option value="5">5</option>
<option value="7">7</option>
<option value="10">10</option>
<option value="15">15</option>
<option value="20">20</option>
<option value="30">30</option>
<option value="45">45</option>
<option value="60">60</option>
</select>

</span>
</li>
<!-- 
<li class='fancy-li'>
L채ht철paikan koordinaatit (lat/long):
<span class="asetukset-desc" style="width:250px;"><input type="text" class="asetukset-input-text" style="width:95px;" value="47.643186"/><input type="text" class="asetukset-input-text" style="width:95px;margin-left:10px;" value="07.643186"/></span>
</li>
-->
</ol>
</div>
</div>

<!-- ### HISTORY TAB ### -->
<div id="tabs-3" style="text-indent:none;border:none;">
  <div style="text-indent:0px; margin-top:22px;left-indent:0px;margin-left:-200px;width:780px;border:dotted 0px #ddd;float:left;">
    <span id="sijainti-kohde">Wille-poika</span><span style="font-size:0.7em;padding-top:10px;"> (4.4.2010 14:56:03)</span>

<select name="nimi" id="history-name-select" class="left-input" style="border:solid 1px #fff;margin-left:50px;font-size:0.8em;">
<option value="0">Wille-poika</option>
<option value="1">Jaana-vaimo</option>
<option value="3">Toiwo-kissa</option>

</select>
<select name="aika" style="border:solid 1px #fff;margin-left:0px;font-size:0.8em;">
<option value="1">1</option>
<option value="2">2</option>
<option value="3">3</option>
<option value="4">4</option>
<option value="5">5</option>
<option value="6">6</option>
<option value="7">7</option>
<option value="8">8</option>
<option value="9">9</option>
<option value="10">10</option>
<option value="11">11</option>
<option value="12">12</option>
<option value="18">18</option>
</select>
<select name="yksikko" style="border:solid 1px #fff;margin-left:0px;font-size:0.8em;">
<option value="1">hours</option>
<option value="3">days</option>
<option value="4">months</option>
</select>
<input type="button" value="show" style="border:solid 1px #fff;margin-left:0px;font-size:0.8em;"/>

<input type="button" value="more..." class="right-input" style="border:solid 1px #fff;margin-left:20px;font-size:0.8em;"/>
</br><br/>
<input type="text" id="sliderval" value="1"/>
<div id="historyslider"></div>
<div id="historymap"></div>

  </div>
</div>
</div>


</div>
<!--right side end -->
<br class="blank" />
</div>
<!--body part end -->

<script type="text/javascript">
  var rpxJsHost = (("https:" == document.location.protocol) ? "https://" : "http://static.");
  document.write(unescape("%3Cscript src='" + rpxJsHost +
"rpxnow.com/js/lib/rpx.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
  RPXNOW.overlay = true;
  RPXNOW.language_preference = 'en';
</script>



<script type="text/javascript"> 
    //<![CDATA[
 
    if (GBrowserIsCompatible()) {
      var firstUpdate = 'true';
      var observerPoint = "";
      var trgName;
      var trgPoint = "";
      var side_bar_html = "";
      var gmarkers = [];
      var htmls = [];
      var i = 0;
      var observer_bar_html = "";
      var observergmarkers = [];
      var observerhtmls = [];
      var j = 0;
      var poly; // warning circle
      var polyline1; // connectionline to selected object
      var drawConnection = 'false';
      var json; // object data (json.markers)
 
      var eventdata; // event list data (json.markers)

      var jsonobs; // observer data;
      var obsLat;
      var obsLng;
      var updatefreq = 10;
      var trgname; // name of the trg object from object.json
      var trgpublicity;

      var polyroute;
      var pointCount;
      var alertCircle = 'false';
      var alertRad = "";
      var marker_set; // observer resize arrow - south
      var marker_set_west; // observer resize arrow - west
      var newdata; // new object data on Ajax refresh

      var map = new GMap2(document.getElementById("map"));
 
var map2 = new GMap2(document.getElementById("historymap"));
    var point2 = new GLatLng(61.51131, 23.60474);
    map2.setCenter(point2, 12);
    map2.addControl(new GSmallMapControl());
  
/* ###### MISC HELPER FUNCTIONS ############ */

 function appendTable(html, i){
 /* 
             $("#sortable tbody").each(function(){
               // Simple bottom row removal
               if($("tbody", this).length > 0){
                $("tbody tr:last", this).remove();
               }else {
                $("tr:last", this).remove();
               }
             });
*/
             $("#sortable tbody").children('tr').remove();
             $("#sortable tbody").append(html); 
             setOtherEventsTime();
             
            // let the plugin know that we made a update 
            $("#sortable").trigger("update"); 
            // set sorting column and direction, this will sort on the first and third column 
            var sorting = [[0,0],[2,0]]; 
            // sort on the first column 
            $("#sortable").trigger("sorton",[sorting]); 
     
            // and make the links to rows
//            $("#sortable tr").bind("click", function(){ 
//                  window.location = 'http://ww.5w.fi/'; 
//            });
        return false; 
 }  


function updateLoop() {

if(firstUpdate == 'false'){
    setTime();
    
    // let's remove the data first from the map...
        map.clearOverlays();
    try{
       updateGetEventMarkers();
       updateGetObjectMarkers();
       updateGetObserverData();
       reDrawMarkers();
       var len =  eventdata.length;
       var newhtml ="";
       if(len > 0){
         for (var i = 0; i < len; i++) {
          // obtain the attributes of each marker
          var marker_in = eventdata[i];
          var lat = marker_in.lat;
          var lng = marker_in.lng;
          var html = marker_in.html;
          var label = marker_in.label;
          var type = marker_in.type;
          if(type == 'public'){
           newhtml +="<tr class='odd'><td><img src='images/public.png' border='0'/></td><td>"+label+"</td><td><a href='#'>"+html+"</a></td><td>Vaihtoi paikkaa</td></tr>";
          }else{
           newhtml +="<tr><td><img src='images/private.png' border='0'/></td><td>"+label+"</td><td>"+html+"</td><td>Vaihtoi paikkaa</td></tr>";
          }
         }
         
         appendTable(newhtml, len);
        }



        // draw the connection between objects if checked 
        if(document.getElementById('cbShowRoute').checked){
         try {
          //  map.removeOverlay(polyroute);
          //alert(newdata);
           reDrawRoute();
           }
            catch (error)
           {
            alert(error);
         }
        }
        // redraw alert circle if checked
        if(document.getElementById('cbShowRadius').checked){
         document.getElementById('cbShowRadius').parentNode.className='row';
         try {
          drawCircle(observerPoint, alertRad, 60);
          }
            catch (error)
          {
            alert(error);
         }

        }
         // redraw observer ALWAYS   
        try {
         var marker = createObserverMarker(obsLat,obsLng,'observer','observer');
         map.addOverlay(marker);
         }catch(error)
         {
          alert(error);
        }

       // redraw connection to latest object if checked
       if(document.getElementById('cbDrawConnection').checked){
       try {
          drawLineBetween(observerPoint, trgPoint);
         }
          catch (error)
         {
          alert(error);
       } 
   
    }

    var newhtml ="";
    }catch(error){

    } // end of first try


  var newupdatefreq = updatefreq * 1000;
 // set the next update
 setTimeout("updateLoop()", newupdatefreq);
 }else{
  firstUpdate = 'false';
  setTime();
    try{
       updateGetEventMarkers();
       updateGetObjectMarkers();
       updateGetObserverData();
       putEvent('<span>p채ivitettiin tapahtumien tiedot...</span>');
     }catch(error){

    }
  var newupdatefreq = updatefreq * 1000;
  setTimeout("updateLoop()", newupdatefreq);
 }
}





function setTime(){

   var now    = new Date();
   var hour   = now.getHours();
   var minute = now.getMinutes();
   var second = now.getSeconds();
   var ap = "AM";
   var month = now.getMonth() + 1;
   var day = now.getDate();
   var year = now.getFullYear();

   if (hour   > 11) { ap = "PM";             }
   if (hour   > 12) { hour = hour;           }
   if (hour   == 0) { hour = 00;             }
   if (hour   == 24){ hour = 00;             }
   if (hour   < 10) { hour   = "0" + hour;   }
   if (day    < 10) { day   = "0" + day;     }
   if (month  < 10) { month  = "0" + month;  }
   if (minute < 10) { minute = "0" + minute; }
   if (second < 10) { second = "0" + second; }
   var timeString = year + 
                    '-' +
                    month + 
                    '-' +
                    day +
                    ', ' +
                    hour +
                    ':' +
                    minute +
                    ':' +
                    second;
    $("#timeNow").text(timeString); 
 }

function putEvent(html){
      $("#event-log").fadeIn(1500);
      $("#event-log").html(html); 
      $("#event-log").delay(3*1000).fadeOut("slow");
      

}

function setHistoryObjectOptions(){
       var len = eventdata.length;  
       var options = "";
       if(len > 0){
         for (var i = 0; i < len; i++) {
          var markin = eventdata[i];
          var name2 = markin.html;
          var imei = markin.imei;
          options += "<option value='"+imei+"'>"+name2+"</option>";
          }
      // alert(options);
       // clear all options and put new options :) 
       $('#history-name-select').empty().append(options);
       }   
       
}



function setOtherEventsTime(){
   var now    = new Date();
   var hour   = now.getHours();
   var minute = now.getMinutes();
   var second = now.getSeconds();
   var ap = "AM";
   if (hour   > 11) { ap = "PM";             }
   if (hour   > 12) { hour = hour;           }
   if (hour   == 0) { hour = 00;             }
   if (hour   == 24){ hour = 00;             }
   if (hour   < 10) { hour   = "0" + hour;   }
   if (minute < 10) { minute = "0" + minute; }
   if (second < 10) { second = "0" + second; }
   var timeString = hour +
                    ':' +
                    minute +
                    ':' +
                    second;
    $("#otherEventsTime").text(timeString); 
 }
 function updateGetObjectMarkers(){
      var json;
      $.ajax({
        url: "/map/object.json",
        cache: false,
        success: function(data){
           json = eval('(' + data + ');');
           newdata = json.markers;
           var powerlevel = json.config[0].power;
           var status = json.config[0].status; // 0 = offline | 1 = online
           trgname = json.config[0].name;
           $("#sijainti-kohde").text(trgname);
           trgpublicity = parseInt(json.config[0].public); // 0 = private | 1 = public
           if(trgpublicity == 1){
            $("#isPrivate").hide();
           }else{
            $("#isPrivate").show();
           }           
          

           if(status == 0){
            $("#powerindicator").hide();
            $("#is-offline").show();
           }else{
            $("#powerindicator").show();
            $("#is-offline").hide();
            var kerroin = 57/100;
            var l = powerlevel*kerroin;
            var len = l.toFixed(0)+"px";
            $("#power-middle").removeClass(); 
            $("#power-middle").css('width',len);
            
            if(powerlevel > 20){
              $("#power-level").text(powerlevel+"%");
              $("#power-middle").addClass("high");
            }else{
              $("#power-level").text(powerlevel+"%");
              $("#power-middle").addClass("low");
            }

           }
           var len2 = newdata.length;
           // ################ FIXME FIXME FIXME ###########################
           // set trgPoint. Must be set to get connection line from observer to target object to work properly
           // The previous point could have moved or something...
           if(len2 > 0){
            
             var hasLabel = function(trgLabel) {
	       var i = null;
	       for (i = 0; len2 > i; i += 1) {
                var marker_in = newdata[i];
                alert(marker_in);
		 if (marker_in.label == trgLabel) {
			alert('found:' + trgLabel);return true;
		 }
	       }
               // not found so...create it from last one
	       return false;
             };

             //var marker_in = newdata[len];
             //var lat = marker_in.lat;
             //var lng = marker_in.lng;
             
           }
           
        }    
      //putEvent('<span>p채ivitettiin seurattavan objektin tiedot...</span>');
      });
     
 }

function updateGetEventMarkers(){
      var events;
      $.ajax({
        url: "/map/events.json",
        cache: false,
        success: function(data){
           events = eval('(' + data + ');');
           eventdata = events.markers;
           setHistoryObjectOptions();
        }    
      });
     
 }

function updateGetObserverData(){
      var observer;
      $.ajax({
        url: "/map/observer.json",
        cache: false,
        success: function(data){
           observer = eval('(' + data + ');');
           updatefreq = observer.config[0].updatefreq;
        }    
      });
     
 }




/* ###### REDRAW ROUTE ############ */

function reDrawRoute(){
        try{
          map.removeOverlay(polyroute);

         }catch(error){

         }
    	var points = [];
        var markers = newdata;
        var nMarkers = markers.length; 
       
        for (var i = 0; i < nMarkers; i++) {
          // obtain the attributes of each marker
          var marker_in = markers[i];
          var lat = marker_in.lat;
          var lng = marker_in.lng;
          var html = marker_in.html;
          var label = marker_in.label;
          var point = new GLatLng(lat,lng); 
          points.push(point);
        }
          points.reverse(); // must be reversed to get the arrows to point correct direction
          polyroute = new BDCCArrowedPolyline(points,"#FF0000",2,0.3,null,60,7,"#0000FF",2,0.5);
		map.addOverlay(polyroute);
        

}

function reDrawMarkers(){
       side_bar_html = "";
       htmls = "";
       gmarkers = "";
       var k = 0;
        
//        var count = gmarkers.length;
//        alert(gmarkers);
//        alert(count);
//        for (var i = 0; i < count; i++) {
//         var marker = gmarkers[i];
//         alert(i);
//         map.removeOverlay(marker); 
//        }
        
        var markers = newdata;
        nMarkers = markers.length;  
        //markers.reverse();
        for (var i = 0; i < nMarkers; i++) {
        
          // obtain the attributes of each marker
          var marker_in = markers[i];
          var lat = marker_in.lat;
          var lng = marker_in.lng;
          var html = marker_in.html;
          var label = marker_in.label;
           // create the marker
          var marker = reCreateMarker(k,lat,lng,label,html);
          
          k++;
          map.addOverlay(marker);
        }        
        pointCount = nMarkers;
        
        var navi_content = "";
        document.getElementById("side_bar_items").innerHTML = side_bar_html;
        putEvent('<span>p채ivitettiin karttaobjektit...</span>');



}

/* ###### RE-CREATE MARKER ############ */
      // A function to create the marker and set up the event window
      function reCreateMarker(pos, lat,lng,name,html) {
       //alert(pos);
       var point = new GLatLng(lat,lng);
       if(pos == 0) { 

         var marker = new GMarker(point,{icon:sprite(1),zIndexProcess:orderOfCreation});
         marker.importance = 100;
        // trgPoint = point;
         
       }else{        
         var marker = (new GMarker(point,{draggable:false, icon:sprite(3)}));
       }
       marker.tooltip = '<div class="tooltip" id="obj'+pos+'"><img src="images/ajax-loading.gif"/><\/div>';
        GEvent.addListener(marker, "click", function() {
          marker.openInfoWindowHtml(html);
        });
        
        //  ======  The new marker 'mouseover' and 'mouseout' listeners  ======
          GEvent.addListener(marker,"mouseover", function() {
              
              showTooltip(marker, pos, lat, lng);
          });        
          GEvent.addListener(marker,"mouseout", function() {
		tooltip.style.visibility="hidden"
          });
        gmarkers[pos] = marker;
        htmls[pos] = html;
        
        side_bar_html += '<a href="javascript:myclick(' + pos + ',' + lat + ', ' + lng + ')" onmouseover="mymouseover(' + pos + ',' + lat + ', ' + lng + ')" onmouseout="mymouseout()">' + name + '<\/a><br>';
        
        pos++;
        return marker;
      }


      // ###### MAP CONFIG: map type
      // function to change configuration selected map type
      function setCurMapType(index) {

      var mTypes = map.getMapTypes();
       map.setMapType(mTypes[index]);
      // and set the selectedIndex in options, seems to forget it if config div in closed..hmmm
      //   $("#sMapType option[index]").attr("selected", true); // no effect, FIXME
          
      }

      // ###### SETTINGS: set Settings observer position: lat and lng
      // Might be a good idea to use Ajax to save them automatically everytime the 
      // location of observer changes...FIXME
      function setSettingsNewObserverPos(lat,lng) {

       $("#user-settings-pos-lat").val(lat); 
       $("#user-settings-pos-lng").val(lng);
      }


      // function to set available maptypes to (select) options in configuration div
      function setMapTypeOptions(){
         var trgElement = document.getElementById('sMapType');
         var optionsHtml = "";

         // lets get the available map types...
         var mapTypes = map.getMapTypes();

         // and print them to settings div
         var arLen=mapTypes.length;
           for ( var i=0, len=arLen; i<len; ++i ){
            var type = mapTypes[i].getName();
            optionsHtml += "<option value='"+i+"'>"+type+"</option>\n";
           }

         // insert the options
         trgElement.innerHTML = optionsHtml;
       } // end function

      function orderOfCreation(marker,b) {
        return 1;
      }


/* ###### CREATE MARKER ############ */
      // A function to create the marker and set up the event window
      function createMarker(lat,lng,name,html) {
       var point = new GLatLng(lat,lng);
       if(i == 0) { 

         var marker = new GMarker(point,{icon:sprite(1),zIndexProcess:orderOfCreation});
         marker.importance = 100;
         trgPoint = point;
         
       }else{        
         var marker = (new GMarker(point,{draggable:false, icon:sprite(3)}));
       }
       marker.tooltip = '<div class="tooltip" id="obj'+i+'"><img src="images/ajax-loading.gif"/><\/div>';
        GEvent.addListener(marker, "click", function() {
          marker.openInfoWindowHtml(html);
        });
        
        //  ======  The new marker 'mouseover' and 'mouseout' listeners  ======
          GEvent.addListener(marker,"mouseover", function() {
              
              showTooltip(marker, i, lat, lng);
          });        
          GEvent.addListener(marker,"mouseout", function() {
		tooltip.style.visibility="hidden"
          });
        gmarkers[i] = marker;
        htmls[i] = html;
        side_bar_html += '<a href="javascript:myclick(' + i + ',' + lat + ', ' + lng + ')" onmouseover="mymouseover(' + i + ',' + lat + ', ' + lng + ')" onmouseout="mymouseout()">' + name + '<\/a><br>';
        
        i++;
        return marker;
      }

/* ###### SHOW TOOLTIP ############ */
      // ====== This function displays the tooltip ======
      // it can be called from an icon mousover or a side_bar mouseover
      function showTooltip(marker, index, lat, lng) {

       
      	tooltip.innerHTML = marker.tooltip;
	var point=map.getCurrentMapType().getProjection().fromLatLngToPixel(map.getBounds().getSouthWest(),map.getZoom());
	var offset=map.getCurrentMapType().getProjection().fromLatLngToPixel(marker.getPoint(),map.getZoom());
	var anchor=marker.getIcon().iconAnchor;
	var width=marker.getIcon().iconSize.width;
	var pos = new GControlPosition(G_ANCHOR_BOTTOM_LEFT, new GSize(offset.x - point.x - anchor.x + width,- offset.y + point.y +anchor.y)); 
	pos.apply(tooltip);
	tooltip.style.visibility="visible";
        
        var point = new GLatLng(lat,lng); 
        var dist = calculateDistance(point);
        
        var replace = '<div class="tooltip" id="obj'+i+'">Et채isyys:'+dist+'<\/div>';
        tooltip.innerHTML = replace;

      }
 
      // ===== This function is invoked when the mouse goes over an entry in the side_bar =====
      // It launches the tooltip on the icon      
      function mymouseover(i, lat, lng) {
        showTooltip(gmarkers[i], i, lat, lng)

      }
      // ===== This function is invoked when the mouse leaves an entry in the side_bar =====
      // It hides the tooltip      
      function mymouseout() {
	tooltip.style.visibility="hidden";
      }

/* ###### CREATE OBSERVER MARKER ############ */
      // A function to create the observer marker and set up the event window
      function createObserverMarker(lat,lng,name,html) {
       
       var point = new GLatLng(lat,lng); 
         var marker = (new GMarker(point,{draggable:true, icon:sprite(2)}));
        observerPoint = point;
        GEvent.addListener(marker, "click", function() {
           
          marker.openInfoWindowHtml(html);
          //myObserverclick('+j+','+lat+','+lng+');
        });
         
        GEvent.addListener(marker, "dragend", function(position) {
         // position is a GLatLng containing the position of
         // of where the marker was dropped
           observerPoint = position;

          // set the new coordinated to user settings tab also. User must save settings. 
          var newlat = position.lat();
          var newlng = position.lng();
          obsLat = newlat;
          obsLng = newlng;
          setSettingsNewObserverPos(newlat, newlng);

         // and naturally try to draw the line to target again
          drawLineBetween(observerPoint, trgPoint);  

         // set new distance
          var clat = $("#cur-lat").val(); 
          var clng = $("#cur-lng").val(); 
          var tpoint = new GLatLng(clat,clng); 
          var dist = calculateDistance(tpoint);
            //alert(dist);

          $("#item-distance").val(dist);
        
          // set the angle again
           var angle = drawArrow(trgPoint);
           rotateImg(angle);

          
           if(alertCircle == 'true'){
             drawCircle(observerPoint, alertRad, 60);
           }
        }); 

        observergmarkers[j] = marker;
        observerhtmls[j] = html;
        observer_bar_html += '<a href="javascript:myObserverclick(' + j + ')">' + '<%=t :object_locations_observer %>' + '<\/a><br>';
        j++;
        return marker;
      }
 
      function myclick(i, lat, lng) {
        var point = new GLatLng(lat,lng); 
        var item_addr;
        trgPoint = point;
        //trgName = name;
        //alert(point);
         // get and put the human readable address to UI object id = item-address
          if (point) {
           geocoder.getLocations(point, function(addresses) {
            if(addresses.Status.code != 200) {
              alert("reverse geocoder failed to find an address");
           }
            else {
            address = addresses.Placemark[0];
            item_addr = "<span>"+address.address+"</span>";

            // calculate the distance in meters
            //alert('hae matka');
            var dist = calculateDistance(point);
            //alert(dist);
            // place the values to fields
            document.getElementById('cur-lat').value = point.lat();
            document.getElementById('cur-lng').value = point.lng();
            document.getElementById('item-distance').value = dist;
            document.getElementById('item-address').value = address.address;
            // now draw the line in between of the observer and the object
            drawLineBetween(observerPoint, point);
            
            var angle = drawArrow(trgPoint);
            rotateImg(angle);
            }
           });
          }
        //gmarkers[i].openInfoWindowHtml(htmls[i]);
         map.setCenter(new GLatLng(lat,lng));
       }


       function myObserverclick(j) {
      var point = observerPoint; 
        var item_addr;

         // get and put the human readable address to UI object id = item-address
          if (point) {
           geocoder.getLocations(point, function(addresses) {
            if(addresses.Status.code != 200) {
              alert("reverse geocoder failed to find an address");
           }
            else {
            address = addresses.Placemark[0];
            item_addr = "<span>"+address.address+"</span>";
            // place the values to fields
            document.getElementById('cur-lat').value = point.lat();
            document.getElementById('cur-lng').value = point.lng();
            document.getElementById('item-address').value = address.address;
            document.getElementById('item-distance').value = '0 km';
            }
           });
          }
        //observergmarkers[j].openInfoWindowHtml(observerhtmls[j]);
        map.setCenter(new GLatLng(point.lat(),point.lng()));
       }

/* ###### GET THE IMAGE/ICON FROM IMAGEMAP ############ */

       function sprite(number){
        var icon = new GIcon(G_DEFAULT_ICON);
        icon.sprite = {};
        icon.sprite.image = "/images/all_markers.png";
        icon.sprite.top = number * 34;
        return icon;
       }

       function spriteNoshadow(number){
        var icon = new GIcon(G_DEFAULT_ICON);
        icon.printShadow = null;
        icon.shadow = null;
        icon.sprite = {};
        icon.sprite.image = "/images/all_markers.png";
        icon.sprite.top = number * 34;
        
        return icon;
       }

/* ###### CALCULATE DISTANCE FROM OBSERVER POINT TO SELECTED ITEM ############ */

        function calculateDistance(stop)
        {
	 try
	   {
		var miledistance = observerPoint.distanceFrom(stop, 3959).toFixed(6);
		var kmdistance = (miledistance * 1.609344).toFixed(6);
                var human = (miledistance * 1.609344).toFixed(1);
                if(kmdistance > 1){
                      return human+" km ("+kmdistance.substr(0,5)+")";
		}else{
                      kmdistance = kmdistance.substr(2,3);
                      return kmdistance+" m";
                }
	    }
	     catch (error)
	    {
		alert(error);
	    }
         }


        function calculateDistanceKm(stop)
        {
	 try
	   {
		var miledistance = observerPoint.distanceFrom(stop, 3959).toFixed(6);
		var kmdistance = (miledistance * 1.609344).toFixed(6);
                var human = (miledistance * 1.609344).toFixed(1);
                      return kmdistance;
	    }
	     catch (error)
	    {
		alert(error);
	    }
         }


/* ###### DRAW ROUTE ############ */

function drawRoute(){
        try{
          map.removeOverlay(polyroute);

         }catch(error){

         }
    	var points = [];
        var markers = json.markers;
        nMarkers = markers.length; 
       
        for (var i = 0; i < nMarkers; i++) {
          // obtain the attributes of each marker
          var marker_in = markers[i];
          var lat = marker_in.lat;
          var lng = marker_in.lng;
          var html = marker_in.html;
          var label = marker_in.label;
          var point = new GLatLng(lat,lng); 
          points.push(point);
        }
          points.reverse();
//        polyroute = new GPolyline(points, "#11fffc", 3);
          polyroute = new BDCCArrowedPolyline(points,"#FF0000",2,0.3,null,60,7,"#0000FF",2,0.5);
		map.addOverlay(polyroute);
        

}


/* ###### DRAW ARROW ############ */

function drawArrow(trgPoint){
    	var points = [];
//          var lat_2 = observerPoint.lat();
//          var lon_2 = observerPoint.lng();          
//alert('again');
//          var lat_1 = trgPoint.lat();
//          var lon_1 = trgPoint.lng();

          var degreesPerRadian = 180.0 / Math.PI;
          var radiansPerDegree = Math.PI / 180.0; 

           // Convert to radians.
           var lat2 = trgPoint.latRadians();
           var lon2 = trgPoint.lngRadians();
           var lat1 = observerPoint.latRadians();
           var lon1 = observerPoint.lngRadians();

           // Compute the angle.
             var angle = - Math.atan2( Math.sin( lon1 - lon2 ) * Math.cos( lat2 ), Math.cos( lat1 ) * Math.sin( lat2 ) - Math.sin( lat1 ) * Math.cos( lat2 ) * Math.cos( lon1 - lon2 ) );
       if ( angle < 0.0 ){
	angle  += Math.PI * 2.0;
       }
       // And convert result to degrees.
       angle = angle * degreesPerRadian;
       angle = angle.toFixed(1);
       //alert(angle);
       return angle;
       

}

/* ###### DRAW CIRCLE = ALERT CIRCLE ############ */
	
function drawCircle(center, radius, nodes, liColor, liWidth, liOpa, fillColor, fillOpa)
{

// #### Creator: Esa 2006 
// #### 5w hacker community wishes all the best for Esa and thanks for this function
// #### Modified by Jarkko Moilanen 2010
	//calculating km/degree
	var latConv = center.distanceFrom(new GLatLng(center.lat()+0.1, center.lng()))/100;
	var lngConv = center.distanceFrom(new GLatLng(center.lat(), center.lng()+0.1))/100;

        try{
         map.removeOverlay(marker_set);
         map.removeOverlay(marker_set_west);
         map.removeOverlay(poly);
        }catch(error){}

	//Loop 
	var points = [];
        
	var step = parseInt(360/nodes)||10;
        var east = parseInt(15*step).toFixed(0);
        var south = parseInt(30*step).toFixed(0);
        var west = parseInt(45*step).toFixed(0);
        var north = parseInt(60*step).toFixed(0);
        //alert(east+"/"+step);
	for(var i=0; i<=360; i+=step)
	 {
          var pint = new GLatLng(center.lat() + (radius/latConv * Math.cos(i * Math.PI/180)), center.lng() + 
	  (radius/lngConv * Math.sin(i * Math.PI/180)));
          var southpint = new GLatLng(center.lat() + (radius/latConv * Math.cos(i * Math.PI/180)), center.lng() + 
	  (radius/lngConv * Math.sin(i * Math.PI/180)));

           if(i == south){
            
             
            marker_set = (new GMarker(southpint,{draggable:true, icon:spriteNoshadow(8)}));
             GEvent.addListener(marker_set, "dragend", function(position) {
       
                var newlat = position.lat();
                var newlng = position.lng();
                
                var newradius = calculateDistanceKm(new GLatLng(newlat,newlng));
                //alert(newradius);
                if(newradius > 1){
                  var temp = parseFloat(newradius).toFixed(2);
                  $("#user-settings-alarm-meters").val(temp+" km"); 
                }else{
                   var temp = parseFloat(newradius).toFixed(3)*1000;
                  $("#user-settings-alarm-meters").val(temp+" m"); 
                }
                alertRad = newradius;
                try{
                map.removeOverlay(marker_set);
                map.removeOverlay(marker_set_west);
                map.removeOverlay(poly);
                drawCircle(center, newradius, 60);
                }catch(error) {}
           });
	   }
           if(i == west){
            marker_set_west = (new GMarker(pint,{draggable:true, icon:spriteNoshadow(9)}));
             GEvent.addListener(marker_set_west, "dragend", function(position) {
       
                var newlat2 = position.lat();
                var newlng2 = position.lng();
                
                var newradius2 = calculateDistanceKm(new GLatLng(newlat2,newlng2));
                //alert(newradius2);
                if(newradius2 > 1){
                  var temp = parseFloat(newradius2).toFixed(2);
                  $("#user-settings-alarm-meters").val(temp+" km"); 
                }else{
                   var temp = parseFloat(newradius2).toFixed(3)*1000;
                  $("#user-settings-alarm-meters").val(temp+" m"); 
                }
                alertRad = newradius2;
                map.removeOverlay(marker_set_west);
                map.removeOverlay(marker_set);
                map.removeOverlay(poly);
                drawCircle(center, newradius2, 60);
                
           });
	   }
	  points.push(pint);
	  bounds.extend(pint); //this is for fit function
	 }
	points.push(points[0]); // Closes the circle, thanks Martin
	fillColor = fillColor||liColor||"#288db1";
	liWidth = liWidth||1;
        var liColor = "#288db1";
        var fillOpa = "0.1";
	poly = new GPolygon(points,liColor,liWidth,liOpa,fillColor,fillOpa);

        // add event listeners
        GEvent.addListener(poly,"mouseover", function() {
              // alert('over Alarm zone');
              //showTooltip(marker, i, lat, lng);
          });        
          GEvent.addListener(poly,"mouseout", function() {
		//tooltip.style.visibility="hidden"
          });
        map.addOverlay(marker_set);
        map.addOverlay(marker_set_west);
	map.addOverlay(poly);
        
}

function toggleAlertCircle(){
  if(document.getElementById('cbShowRadius').checked){
   //draw the circle again
   
   document.getElementById('cbShowRadius').checked = false;
   document.getElementById('cbShowRadius').parentNode.className='row';

   alertCircle = 'false';
    try {
       map.removeOverlay(poly);
       map.removeOverlay(marker_set);
       map.removeOverlay(marker_set_west);
        }
         catch (error)
        {
          //alert(error);
        }

     
  }else{
   // remove the circle.
   alertCircle = 'true';
   drawCircle(observerPoint, alertRad, 60);
   document.getElementById('cbShowRadius').checked = true;
  }
  

}


function toggleRoute(){
  if(document.getElementById('cbShowRoute').checked){
   //draw the circle again
   document.getElementById('cbShowRoute').checked = false;
    try {
       map.removeOverlay(polyroute);
        }
         catch (error)
        {
        //  alert(error);
        }

     
  }else{
   // redraw route.
   
   drawRoute();
   document.getElementById('cbShowRoute').checked = true;
  }

}


function toggleNavi(){
  if(document.getElementById('cbShowNavi').checked){
   //draw the circle again
   document.getElementById('cbShowNavi').checked = false;
    try {
       map.removeControl(mapNaviControl);
        }
         catch (error)
        {
          //alert(error);
        } 
  }else{
   // add the circle.
    map.addControl(mapNaviControl, topRight);
   document.getElementById('cbShowNavi').checked = true;
  }

}

function toggleDrawConnection(){

 if(document.getElementById('cbDrawConnection').checked){
   document.getElementById('cbDrawConnection').checked = false;
    try {
       // 
       drawConnection = 'false';
       map.removeOverlay(polyline1); 
        }
         catch (error)
        {
      //    alert(error);
        } 
  }else{
   // 
   drawConnection = 'true';
   document.getElementById('cbDrawConnection').checked = true;
   drawLineBetween(observerPoint, trgPoint);
  }

}


function removeCircle(){
        map.removeOverlay(poly);
}


function drawLineBetween(startPoint, stopPoint){

try {

      map.removeOverlay(polyline1); 

    }catch (error){

     //  alert(error);

    }

try { 
    
     if(drawConnection == 'true'){
     
     polyline1 = new GPolyline([startPoint,stopPoint], "#ff0000", 2);  
     map.addOverlay(polyline1);
    }
   }
  catch (error){
         //alert(error);
  } 
  
}

function initConfig(){
// clear all cached selections, at least FF remembers settings otherwise...
$(".row input").each(function(index){
   $(this).removeAttr("checked");
 });

//$("#cbShowRadius").attr("checked", "false");


}

/*  ########################################################
    ############# CREATE THE MAP ########################### 
    ############# (finally...)   ########################### 
    ######################################################## */

      
      var mapNaviControl = new GSmallMapControl();
      var topRight = new GControlPosition(G_ANCHOR_TOP_RIGHT, new GSize(1,1));
      map.addControl(mapNaviControl, topRight); // new GControlPosition(G_ANCHOR_TOP_RIGHT, new GSize(1,1))
      map.removeControl(mapNaviControl);
      var bounds = new GLatLngBounds(); // needed by drawcircle()
      // reverse lat/long to address
      var geocoder = new GClientGeocoder(); 
      // put the maptypes in configuration div
      setMapTypeOptions();        




      // ====== set up marker mouseover tooltip div ======
      var tooltip = document.createElement("div");
      document.getElementById("map").appendChild(tooltip);
      tooltip.style.visibility="hidden";


      /* ###### GET THE OBJECT DATA FORM JSON FILE ############ */
      
      GDownloadUrl("/map/object.json", function (data) {
        json = eval( '(' + data + ')' );
        var markers = json.markers;
        var nMarkers = markers.length; 
        markers.reverse(); 

        var powerlevel = json.config[0].power;
        var status = json.config[0].status; // 0 = offline | 1 = online
        trgname = json.config[0].name;

        //$("#sijainti-kohde").text(trgname);
        trgpublicity = json.config[0].public; // 0 = private | 1 = public
           if(trgpublicity == 1){
            $("#isPrivate").hide();
           }else{
            $("#isPrivate").show();
           }

           if(status == 0){
            $("#powerindicator").hide();
            $("#is-offline").show();
           }else{
            $("#powerindicator").show();
            $("#is-offline").hide();
            var kerroin = 57/100;
            var l = powerlevel*kerroin;
            var len = l.toFixed(0)+"px";
            $("#power-middle").removeClass(); 
            $("#power-middle").css('width',len);
            
            if(powerlevel > 20){
              $("#power-level").text(powerlevel+"%");
              $("#power-middle").addClass("high");
            }else{
              $("#power-level").text(powerlevel+"%");
              $("#power-middle").addClass("low");
            }

           }



        //markers.reverse(); 
        for (var i = 0; i < nMarkers; i++) {
          // obtain the attributes of each marker
          var marker_in = markers[i];
          var lat = marker_in.lat;
          var lng = marker_in.lng;
          var html = marker_in.html;
          var label = marker_in.label;
           // create the marker
          var marker = createMarker(lat,lng,label,html);
          

          map.addOverlay(marker);
        }        
        pointCount = nMarkers;
        i = 0;
        var navi_content = document.getElementById("side_bar_items").innerHTML;
        document.getElementById("side_bar_items").innerHTML = navi_content.concat(side_bar_html);
        setTime();
      });

      /* ###### GET THE OBSERVER DATA FORM JSON FILE ############ */

      GDownloadUrl("/map/observer.json", function (data) {
        var jsonobs = eval( '(' + data + ')' );
        var markers = jsonobs.markers, nMarkers = markers.length;  
        var config = jsonobs.config;
        var rad = config[0].alertrad;
        updatefreq = config[0].updatefreq;
        //alert(updatefreq);
        alertRad = rad;
        $("#user-settings-alarm-meters").val(rad+" km");
        for (var i = 0; i < nMarkers; i++) {
          // obtain the attributes of each marker
          var marker_in = markers[i];
          var lat = marker_in.lat;
          var lng = marker_in.lng;
          var html = marker_in.html;
          var label = marker_in.label;
          var point = new GLatLng(lat,lng);
         
          // put the point to global var observerPoint for later use on 
          // figuring out the distance of objects to observer.
          observerPoint = point;
          obsLat = lat;
          obsLng = lng;
          setSettingsNewObserverPos(lat,lng);
          // create the marker
          var marker = createObserverMarker(lat,lng,label,html);
          map.addOverlay(marker);
//          var curzoom = map.getZoom(); 
          map.setCenter(new GLatLng(lat,lng), 15);
          //drawCircle(point, 0.21, 60); // center, radius, nodes,
          //drawRoute();
          var angle = drawArrow(trgPoint);
          //alert(angle);
          rotateImg(angle);

/*
           try{
             var distis = calculateDistance(trgPoint);
             document.getElementById('item-distance').value = distis;
             }catch(error){

           }

  */       
        }
        var navi_content = document.getElementById("obs_pos").innerHTML;
        document.getElementById("obs_pos").innerHTML = navi_content.concat(observer_bar_html);
      });

    

    initConfig();
   
    //setTimeout("updateLoop()", 10000);
    }
 
    else {
      alert("Sorry, the Google Maps API is not compatible with this browser");
    }
    

    //]]>
    </script> 


